{
  "openapi": "3.0.0",
  "info": {
    "version": "0.1.0",
    "title": "Expense Tracker API"
  },
  "servers": [
    {
      "url": "https://expense-tracker-oci.herokuapp.com/"
    },
    {
      "url": "http://localhost:5000/"
    }
  ],
  "paths": {
    "/auth": {
      "post": {
        "summary": "Authenticate user",
        "operationId": "authUser",
        "tags": [
          "auth"
        ],
        "requestBody": {
          "description": "Provide credentials in order to authenticate",
          "required": "yes",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "googleId"
                ],
                "properties": {
                  "googleId": {
                    "$ref": "#/components/schemas/GoogleId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LoggedUser"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "List all users",
        "operationId": "listUsers",
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "List of all available users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      }
                    ],
                    "properties": {
                      "relation": {
                        "$ref": "#/components/schemas/ReliationshipStatus"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create new user",
        "operationId": "createUser",
        "tags": [
          "users"
        ],
        "requestBody": {
          "description": "User to be created",
          "required": "yes",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "googleId"
                ],
                "allOf": [
                  {
                    "$ref": "#/components/schemas/UserProperties"
                  }
                ],
                "properties": {
                  "googleId": {
                    "$ref": "#/components/schemas/GoogleId"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/LoggedUser"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/AlreadyExists"
          },
          "422": {
            "description": "Malformed request, see requirements in response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MallformedRequest"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "put": {
        "summary": "Update user data",
        "operationId": "updateUser",
        "tags": [
          "users"
        ],
        "requestBody": {
          "description": "User data to be updated. Fields are optional. If field is provided with null value it will be reset to default",
          "required": "yes",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProperties"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user, works only for randomly generated(test) user",
        "tags": [
          "users"
        ],
        "responses": {
          "202": {
            "description": "Successfully removed generic user"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/friends": {
      "post": {
        "summary": "Send friend request",
        "operationId": "sendFriendRequest",
        "tags": [
          "friends"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/anotherUserIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Friend request successfully sent",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRequest"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "description": "User already interacted with this request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRequest"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List all friend relations",
        "operationId": "listFriendRequests",
        "tags": [
          "friends"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Filter results by given status",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FriendStatus"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pending friend requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/User"
                      },
                      {
                        "$ref": "#/components/schemas/FriendRequest"
                      }
                    ],
                    "properties": {
                      "myRequest": {
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Accept or reject friend request",
        "operationId": "handleFriendRequest",
        "tags": [
          "friends"
        ],
        "requestBody": {
          "description": "Request to be handled",
          "required": "yes",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requestId": {
                    "$ref": "#/components/schemas/RequestId"
                  },
                  "accept": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated friend request status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendRequest"
                },
                "example": {
                  "requestId": "sx6biozc38dcv61lbfup8341",
                  "requestStatus": "accepted"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plans": {
      "get": {
        "summary": "List ordered array of plans",
        "operationId": "listPlans",
        "tags": [
          "plans"
        ],
        "responses": {
          "200": {
            "description": "List of plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanOverview"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add new plan",
        "operationId": "addPlan",
        "tags": [
          "plans"
        ],
        "requestBody": {
          "description": "Details for the plan.",
          "required": "yes",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "planned": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Expense"
                    }
                  },
                  "money": {
                    "$ref": "#/components/schemas/MoneyValue"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "plan was created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Plan"
                    }
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/RequestId"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "description": "request is mallformed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MallformedRequest"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plans/:planId": {
      "patch": {
        "description": "update plan money",
        "operationId": "updatePlan",
        "tags": [
          "plans"
        ],
        "parameters": [
          {
            "name": "planId",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestId"
            }
          },
          {
            "name": "value",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MoneyValue"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "plan was created",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Plan"
                    }
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/RequestId"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "description": "request is mallformed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MallformedRequest"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/expenses": {
      "get": {
        "description": "list all expenses by specific criteria",
        "operationId": "listExpenses",
        "tags": [
          "expenses"
        ],
        "parameters": [
          {
            "name": "planId",
            "description": "Specifiy to which plans are needed expenses",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestId"
            }
          },
          {
            "name": "filter",
            "description": "pass all values you want to receive expense for",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ExpenseType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfuly retrieved expenses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpenseExtended"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "description": "request is mallformed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MallformedRequest"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Add new expense to plan",
        "operationId": "addExpense",
        "tags": [
          "expenses"
        ],
        "parameters": [
          {
            "name": "planId",
            "description": "Specifiy to which plans we are adding",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/RequestId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Expense"
                  }
                ],
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/ExpenseType"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfuly retrieved expenses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExpenseExtended"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "description": "request is mallformed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MallformedRequest"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/expenses/:expenseId": {
      "put": {
        "description": "Update expense",
        "operationId": "updateExpense",
        "tags": [
          "expenses"
        ],
        "parameters": [
          {
            "name": "expenseId",
            "in": "path",
            "required": "yes",
            "schema": {
              "$ref": "#/components/schemas/RequestId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExpenseExtended"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfuly retrieved expenses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpenseExtended"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "422": {
            "description": "request is mallformed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MallformedRequest"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "api_key": []
    },
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {
      "anotherUserIdParameter": {
        "in": "query",
        "name": "targetUser",
        "schema": {
          "$ref": "#/components/schemas/UserId"
        },
        "required": true,
        "description": "ID of the target user"
      },
      "userIdParameter": {
        "in": "path",
        "name": "userId",
        "schema": {
          "$ref": "#/components/schemas/UserId"
        },
        "required": true,
        "description": "ID of the current user"
      },
      "udidParameter": {
        "name": "udid",
        "in": "header",
        "description": "Unique device id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "languageParameter": {
        "name": "language",
        "in": "header",
        "description": "Device language",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "fr",
            "nl"
          ]
        }
      },
      "platformParameter": {
        "name": "platform",
        "in": "header",
        "description": "Device platform",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "android",
            "ios"
          ]
        }
      }
    },
    "schemas": {
      "UserId": {
        "type": "string",
        "example": "5b59940a06dae000b9248341"
      },
      "GoogleId": {
        "type": "string",
        "example": "067074372935586760222"
      },
      "UserName": {
        "type": "string",
        "example": "Hristo Todorov"
      },
      "UserProperties": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/UserName"
          }
        }
      },
      "User": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserProperties"
          }
        ],
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/UserId"
          }
        }
      },
      "ExpenseType": {
        "type": "string",
        "enum": [
          "pending",
          "payed",
          "unplanned"
        ]
      },
      "Expense": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "example": 568.2
          },
          "description": {
            "type": "string",
            "example": "Kasko kola"
          }
        }
      },
      "ExpenseExtended": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Expense"
          }
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "type": {
            "$ref": "#/components/schemas/ExpenseType"
          }
        }
      },
      "PlanOverview": {
        "type": "object",
        "required": [
          "id",
          "description"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/RequestId"
          },
          "description": {
            "type": "string",
            "example": "August 2018"
          }
        }
      },
      "MoneyValue": {
        "type": "number",
        "example": 6400
      },
      "Money": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/MoneyValue"
          },
          "lastModified": {
            "type": "string",
            "format": "date",
            "example": "2018-03-31"
          }
        }
      },
      "Plan": {
        "type": "object",
        "properties": {
          "money": {
            "$ref": "#/components/schemas/Money"
          },
          "expenses": {
            "type": "object",
            "properties": {
              "planned": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Expense"
                    }
                  ],
                  "properties": {
                    "id": {
                      "$ref": "#/components/schemas/RequestId"
                    },
                    "payed": {
                      "type": "boolean"
                    }
                  }
                }
              },
              "unplanned": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Expense"
                },
                "example": [
                  {
                    "value": 200,
                    "description": "Garderob"
                  }
                ]
              }
            }
          }
        }
      },
      "RequestId": {
        "type": "string",
        "example": "sx6biozc38dcv61lbfup8341"
      },
      "ReliationshipStatus": {
        "type": "string",
        "enum": [
          "none",
          "pending",
          "accepted",
          "rejected"
        ]
      },
      "FriendStatus": {
        "type": "string",
        "enum": [
          "pending",
          "accepted",
          "rejected"
        ]
      },
      "FriendRequest": {
        "type": "object",
        "required": [
          "requestId",
          "requestStatus"
        ],
        "properties": {
          "requestId": {
            "$ref": "#/components/schemas/RequestId"
          },
          "requestStatus": {
            "$ref": "#/components/schemas/FriendStatus"
          }
        }
      },
      "MallformedRequest": {
        "type": "array",
        "items": {
          "type": "object",
          "required": [
            "location",
            "param",
            "msg"
          ],
          "properties": {
            "location": {
              "type": "string"
            },
            "param": {
              "type": "string"
            },
            "msg": {
              "type": "string"
            }
          }
        }
      },
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized or missing api_key"
      },
      "NotFound": {
        "description": "Requested resource not found"
      },
      "Forbidden": {
        "description": "Not allowed to perform this action"
      },
      "AlreadyExists": {
        "description": "Requested resource cannot be created as it already exists"
      },
      "LoggedUser": {
        "description": "Successfully logged user",
        "headers": {
          "Auth-Token": {
            "schema": {
              "type": "string",
              "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJP"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/User"
                }
              ],
              "properties": {
                "googleId": {
                  "$ref": "#/components/schemas/GoogleId"
                }
              }
            }
          }
        }
      }
    }
  }
}